@{
    ViewBag.Title = "Home Page";
}

<script type="text/javascript">
    $(document).ready(function () {
        $(function () {

            const SUMA_RALEOS  = 100;
            const GRAPH_CARBON = 1;
            const GRAPH_AREA   = 2;
            const GRAPH_DAP    = 3;
            const GRAPH_HEIGHT = 4;
            const GRAPH_VOL   = 5;

            var datos_carbono,
                datos_area,
                datos_dap,
                datos_volumen,
                datos_altura;

            var chart;

            String.prototype.format = function () {
                var formatted = this;
                for (var i = 0; i < arguments.length; i++) {
                    var regexp = new RegExp('\\{' + i + '\\}', 'gi');
                    formatted = formatted.replace(regexp, arguments[i]);
                }
                return formatted;
            };

            /**
             * Función que convierte un serializedArray ({{name: key_1, value: x} ... , {name: key_n, value: y}}) a un 
             * object key:Value ({key_1: value, ... key_n: value});
             * return {object} objeto key:value
             */
            function convertSerializedArray(serializedArray) {
                var newObject = {};
                var actObj;
                for (var i = 0; i < serializedArray.length; i++) {
                    actObj = serializedArray[i];
                    newObject[actObj.name] = actObj.value;
                }
                return newObject;
            }

            /**
             * Método que crea el highchart basado en el vector y ID que se le manda
             * param {array} values : vector con datos calculados
             * param {int} graph: ID de gráfica a mostrar
             */
            function showGraph(values, graph) {
                // Si ya existe la gráfica, solo modifica datos, color y titulo
                if (typeof chart != "undefined") {
                    chart.series[0].setData(values);
                    chart.series[0].options.color = getGraphColor(graph);
                    chart.series[0].update(chart.series[0].options);
                    chart.setTitle({ text: getGraphMeasure(graph) });
                } else {
                    chart = new Highcharts.Chart('graph-result', {

                        title: {
                            text: getGraphMeasure(graph)
                        },
                        subTitle: {
                            text: ''
                        },
                        chart: {
                            zoomType: 'x'
                        },
                        yAxis: {
                            title: {
                                text: null
                            }
                        },
                        xAxis: {
                            title: {
                                text: 'Año'
                            },
                        },
                        legend: {
                            layout: 'horizontal',
                            align: 'center',
                            verticalAlign: 'bottom'
                        },
                        plotOptions: {
                            series: {
                                label: {
                                    connectorAllowed: true
                                },

                                marker: {
                                    enabled: true,
                                    fillColor: '#FFFFFF',
                                    lineWidth: 2,
                                    lineColor: null // inherit from series
                                },

                                color: getGraphColor(graph)
                            },

                            line: {
                                dataLabels: {
                                    enabled: true
                                },
                                enableMouseTracking: false
                            }
                        },

                        series: [{
                            showInLegend: false,
                            data: values
                        }],

                        responsive: {
                            rules: [{
                                condition: {
                                    maxWidth: 1000
                                },
                                chartOptions: {
                                    legend: {
                                        layout: 'horizontal',
                                        align: 'center',
                                        verticalAlign: 'bottom'
                                    }
                                }
                            }]
                        }

                    });
                }
            }

            /**
             * Función que retorna el título la gráfica, basándose en su ID
             * param {int} graph ID de la gráfica
             */
            function getGraphMeasure(graph) {
                switch (graph) {
                    case GRAPH_CARBON: return "Toneladas de carbono";
                    case GRAPH_AREA: return "Metros cuadrados";
                    case GRAPH_DAP: return "DAPs";
                    case GRAPH_HEIGHT: return "Metros";
                    case GRAPH_VOL: return "Metros cúbicos";
                    default: return "";
                }
            }

            /**
             * Función que retorna el color la gráfica, basándose en su ID
             * param {int} graph ID de la gráfica
             */
            function getGraphColor(graph) {
                switch (graph) {
                    case GRAPH_CARBON: return "#90CAF9";
                    case GRAPH_AREA: return "#F48FB1";
                    case GRAPH_DAP: return "#EF9A9A";
                    case GRAPH_HEIGHT: return "#80CBC4";
                    case GRAPH_VOL: return "#BDBDBD";
                    default: return "#546E7A";
                }
            }

            /**
             * Función que, dependiendo el vector de parámetro, creará dinámicamente el contenido
             * de la tabla. Creará header, el cual contendrá el # de año proyectado y el body, 
             * el cual tendrá el valor calculado
             * param {array} data : vector con datos calculados
             * return {html} html que contendrá la tabla
             */
            function generateTable(data) {
                var header = '';
                var content = '';
                var actTh = '';
                var actTd = '';
                var finalTable = '<thead><tr>{0}</tr></thead><tbody><tr>{1}</tr></tbody>'
                for (var i = 0; i < data.length; i++) {
                    header += '<th style="text-align: center" nowrap>Año ' + i + '</th>';
                    content += '<td style="text-align: center">' + data[i] + '</td>';
                }

                return finalTable.format(header, content);
            }

            /**
             * Función que, dependiendo el vector de parámetro, creará dinámicamente el contenido
             * de la tabla proyectada. Creará header, el cual contendrá el # de año proyectado y el body, 
             * el cual tendrá el valor calculado
             * param {array} data : vector con datos calculados
             * return {html} html que contendrá la tabla
             */
            function generateTableProjected(data) {
                var header = '';
                var content = '';
                var actTh = '';
                var actTd = '';
                var actData = [];
                var actYear;
                var finalTable = '<thead><tr>{0}</tr></thead><tbody><tr>{1}</tr></tbody>'
                // Recorre resultados y crea un array con #año como key y value la proyección de carbono
                for (var i = 0; i < data.length; i++) {
                    actYear = data[i][0];
                    if (actData[actYear] == null) {
                        actData[actYear] = [];
                    } 
                    actData[actYear].push(data[i][1]);
                }
                actData.forEach(function (element, index, array) {
                    header += '<th style="text-align: center" nowrap>Año ' + index + '</th>';
                    content += '<td style="text-align: center">' + element.toString() + '</td>';
                });

                return finalTable.format(header, content);
            }

            /**
             * Función que agrega <option> a Select de años de raleo, según la cantidad ingresada en input
             * param {int} years: cantidad de años
             */
            function addYearsSelects(years) {

                $('#sel_raleo1').find('option').remove();
                $('#sel_raleo2').find('option').remove();

                var firstYear = (new Date()).getFullYear();
                var lastYear = firstYear + years;

                $('#sel_raleo2').append($('<option>', {
                    value: 0,
                    text: "Sin Raleo"
                }));

                var count_years = 1;
                // Agrega <option> según cantidad de años
                for (var i = firstYear; i < lastYear; i++) {
                    $('#sel_raleo1').append($('<option>', {
                        value: count_years,
                        text: i.toString()
                    }));
                    $('#sel_raleo2').append($('<option>', {
                        value: count_years,
                        text: i.toString()
                    }));

                    count_years++;
                }
            }

            /**
             * Función que pone como obligatorio o no obligatorio los campos de raleo
             * param {boolean} required: true requeridos, false no requeridos
             */
            function updateRaleoRequired(required) {
                $('#pct1').prop('required', required);
                $('#pct2').prop('required', required);
            }

            /**
             * Metodo que asigna datos de el cálculo a cada una de las variables globales.
             * Se hace una copia de los datos, para que al modificar la gráfica no se modifiquen los mismos
             * param {array} values: array con resultados
             */
            function setNavValues(values) {
                datos_carbono = values.carbono.slice(0);
                datos_altura  = values.altura.slice(0);
                datos_area    = values.area.slice(0);
                datos_dap     = values.dap.slice(0);
                datos_volumen = values.volumen.slice(0);
            }

            /**
             * Método que reinicia el estado de las tabs, dejando únicamente como activa la de "Carbono" 
             */
            function resetTabs() {
                $('#nav-carbono').parent().addClass('active');
                $('#nav-area').parent().removeClass('active');
                $('#nav-altura').parent().removeClass('active');
                $('#nav-dap').parent().removeClass('active');
                $('#nav-volumen').parent().removeClass('active');
            }

            // Reinicia form y oculta resultado (cálculo actual)
            $('#btnResetFormActual').click(function () {
                $('#formCalculoActual')[0].reset();
                $('#panelResultadoActual').css('display', 'none');
            });

            // Reinicia form y oculta resultado (cálculo proyectado)
            $('#btnResetFormProyectada').click(function () {
                if ($('#checkRaleo').prop('checked')) {
                    $(".panel-raleo").slideToggle("slow");
                    updateRaleoRequired(false);
                    $('#pct2').prop('required', false);
                }
                // Reinicia form y oculta resultado
                $('#formCalculoProyectado')[0].reset();
                $('#panelResultadoProyectado').css('display', 'none');
                $('#checkRaleo').prop('disabled', true);
                $('#lblCheckRaleo').css('color', "#dddddd");

                resetTabs();
            });

            // Cada vez que se escribe en campo de años (proyectado), se verifica su valor
            $('#txtYearsP').keyup(function () {
                var newVal = $('#txtYearsP').val();
                // Si valor de years tiene data, habilita checkbox
                if (newVal !== "") {
                    $('#checkRaleo').prop('disabled', false);
                    $('#lblCheckRaleo').css('color', "black");
                    // Llena Select con años
                    addYearsSelects(parseInt(newVal));
                } else {
                    // Si lo deja Empty y el checkbox esta seleccionado, le hace uncheck y oculta panel
                    if ($('#checkRaleo').prop('checked')) {
                        $('#checkRaleo').prop('checked', false);
                        $(".panel-raleo").slideToggle("slow");
                        updateRaleoRequired(false);
                    }
                    $('#checkRaleo').prop('disabled', true);
                    $('#lblCheckRaleo').css('color', "#dddddd");
                }
                
            });

            // Cada vez que cambia checkbox, mostrará/ocultará panel de raleo
            $("#checkRaleo").change(function() {
                $(".panel-raleo").slideToggle("slow");
                updateRaleoRequired(this.checked);

                // Inicialmente este año no es obligatorio
                $('#pct2').prop('required', false);
            });

            // Cambio del Combobox de Año raleo 2
            $("#sel_raleo2").change(function () {
                // Si selecciona "Sin Raleo", limpia campo del %
                if ($("#sel_raleo2").val() === "0") {
                    $('#pct2').val('');
                    $('#pct2').prop('required', false);
                } else {
                    $('#pct2').prop('required', true);
                }
            });

            // Muestra gráfica y tabla de carbono al volver esta Tab como Actual
            $('#nav-carbono').on('click', function () {
                if (!$(this).parent().hasClass('active')) {
                    if ($('#checkRaleo').prop('checked')) {
                        $('#tablaProyectada').html(generateTableProjected(datos_carbono));
                    } else {
                        $('#tablaProyectada').html( generateTable(datos_carbono));
                    }
                    showGraph(datos_carbono, GRAPH_CARBON);
                }
            });

            // Muestra gráfica y tabla de altura al volver esta Tab como Actual
            $('#nav-altura').on('click', function () {
                if (!$(this).parent().hasClass('active')) {
                    if ($('#checkRaleo').prop('checked')) {
                        $('#tablaProyectada').html(generateTableProjected(datos_altura));
                    } else {
                        $('#tablaProyectada').html(generateTable(datos_altura));
                    }
                    showGraph(datos_altura, GRAPH_HEIGHT );
                }
            });

            // Muestra gráfica y tabla de área al volver esta Tab como Actual
            $('#nav-area').on('click', function () {
                if (!$(this).parent().hasClass('active')) {
                    if ($('#checkRaleo').prop('checked')) {
                        $('#tablaProyectada').html(generateTableProjected(datos_area));
                    } else {
                        $('#tablaProyectada').html(generateTable(datos_area));
                    }
                    showGraph(datos_area, GRAPH_AREA);
                }
            });

            // Muestra gráfica y tabla de DAP al volver esta Tab como Actual
            $('#nav-dap').on('click', function () {
                if (!$(this).parent().hasClass('active')) {
                    if ($('#checkRaleo').prop('checked')) {
                        $('#tablaProyectada').html(generateTableProjected(datos_dap));
                    } else {
                        $('#tablaProyectada').html(generateTable(datos_dap));
                    }
                    showGraph(datos_dap, GRAPH_DAP);
                }
            });

            // Muestra gráfica y tabla de volumen al volver esta Tab como Actual
            $('#nav-volumen').on('click', function () {
                if (!$(this).parent().hasClass('active')) {
                    if ($('#checkRaleo').prop('checked')) {
                        $('#tablaProyectada').html(generateTableProjected(datos_volumen));
                    } else {
                        $('#tablaProyectada').html(generateTable(datos_volumen));
                    }
                    showGraph(datos_volumen, GRAPH_VOL);
                }
            });

            /**
             * Submit del form de cálculo actual.
             * Se hace Submit de la form via AJAX, y así obtener el resultado y luego 
             * mostrarlo en el panel de resultado
             */
            $('#formCalculoActual').submit(function (event) {
                event.preventDefault();
                var formData = convertSerializedArray($(this).serializeArray());
                var postURL = '@Url.Action("calculoActual", "Calculator")';
                $.ajax({
                    url: postURL,
                    method: "POST", 
                    data: formData,
                    success: function (data) {
                        var status = data.status;
                        // Llamada correcta, muestra resultado
                        if (status == 200) {
                            $('#panelResultadoActual').css('display', 'block');
                            $('#lblResultado').html(data.response + " Toneladas de Carbono");
                        }
                    },
                    error: function (requestObject, error, errorThrown) {
                        alert('Error en cálculo');
                    }
                });
            });

            /**
             * Submit del form de cálculo proyectado.
             * Se hace Submit de la form via AJAX, y así obtener el resultado y luego 
             * mostrarlo en el panel de resultado
             */
            $('#formCalculoProyectado').submit(function (event) {
                event.preventDefault();
                var formData = convertSerializedArray($(this).serializeArray());
                var postURL = '@Url.Action("calculoProyectado", "Calculator")';

                var sumaRaleo = 0;

                // Si el año de los raleos es distinto, sí lo toma en cuenta.
                if (formData.sel_raleo1 !== formData.sel_raleo2) {

                    var raleo = {};
                    // Si la opción de raleos está seleccionada, obtiene sus valores
                    if ($('#checkRaleo').prop('checked')) {

                        if (formData.pct1 > 0 && formData.pct1 <= 50) {

                            raleo[formData.sel_raleo1] = formData.pct1;
                            // Si sí hay raleo, agrega propiedad a objeto
                            if (formData.sel_raleo2 !== "0") {

                                if (formData.pct2 > 0 && formData.pct2 <= 50) {

                                    raleo[formData.sel_raleo2] = formData.pct2;
                                    sumaRaleo = parseInt(raleo[formData.sel_raleo1]) + parseInt(raleo[formData.sel_raleo2]);
                                }
                                else {
                                    alert("Raleos deben ser menor o igual a 50%");
                                }

                            } else
                                sumaRaleo = parseInt(raleo[formData.sel_raleo1]);
                        }
                        else {
                            alert("Raleos deben ser menor o igual a 50%");
                        }
                    }

                    // Elimina campos de raleo del Form
                    delete formData['pct1'];
                    delete formData['pct2'];
                    delete formData['sel_raleo1'];
                    delete formData['sel_raleo2'];

                    // Agreba objeto de raleo a campos del Form
                    formData['raleo'] = JSON.stringify(raleo);
                } else {
                    alert('Debe seleccionar años diferentes')
                }

                // Verifica que la suma de raleos esté correcta
                if (sumaRaleo <= SUMA_RALEOS) {

                    $.ajax({
                        url: postURL,
                        method: "POST",
                        data: formData,
                        success: function (data) {
                            var status = data.status;
                            var values = data.response;
                            // Llamada correcta, muestra resultado
                            if (status == 200) {
                                setNavValues(values);
                                resetTabs();

                                $('#graph-result').data('values', values);
                                $('#panelResultadoProyectado').css('display', 'block');
                                showGraph(values.carbono, GRAPH_CARBON);

                                // Si se usan raleos, utiliza diferente función para mostrar data
                                if ($('#checkRaleo').prop('checked')) {
                                    // Genera tabla HTML
                                    $('#tablaProyectada').html(generateTableProjected(values.carbono));
                                } else {
                                    $('#tablaProyectada').html(generateTable(values.carbono));
                                }
                            }
                        },
                        error: function (requestObject, error, errorThrown) {
                            alert('Error en cálculo');
                        }
                    });
                } else {
                    alert("La suma de los raleos debe ser menor o igual al 100%");
                }
            });

        })
    });
</script>

<ul class="nav nav-tabs">
    <li class="active">
        <a data-toggle="tab" href="#calc_actual">Actual</a>
    </li>
    <li>
        <a data-toggle="tab" href="#calc_proyeccion">Proyección</a>
    </li>
</ul>

<div class="tab-content">
    <!-- Tab Cálculo actual-->
    <div id="calc_actual" class="tab-pane fade in active">
        
        <div class="row tab-upper-margin">
            <!-- Ingresos -->
            <div class="panel panel-default" style="margin: 0px 15px 0px 15px;">
                <div class="panel-heading">
                    <h3 class="panel-title">Ingresos</h3>
                </div>
                <div class="panel-body">
                    @using (Html.BeginForm("calculoActual", "Calculator", FormMethod.Post, new { id = "formCalculoActual" }))
            {
                <div class="row">
                    <div class="col-md-3">
                        <label for="sel_especie">Especie</label>
                        <select class="form-control big-input-size" id="sel_especie" name="especie">
                            <option>Pino Candelillo</option>
                            <option>Pino Caribe</option>
                            <option>Pinus Ocote</option>
                            <option>Teca</option>
                            <option>Palo Blanco</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label for="#txtDAP">DAP</label>
                        <input id="txtDAP" name="dap" type="number" class="form-control big-input-size" placeholder="15 cm" min="0" step="any" autocomplete="off" required>
                    </div>
                    <div class="col-md-3">
                        <label for="txtNumero">Número de árboles</label>
                        <input id="txtNumero" name="numArboles" type="number" class="form-control big-input-size" placeholder="1111" min="0" step="1" autocomplete="off" required>
                    </div>
                    <div class="col-md-3">
                        <label for="txtAltura">Altura media</label>
                        <input id="txtAltura" name="altura" type="number" class="form-control big-input-size" placeholder="10 m" min="0" step="any" autocomplete="off" required>
                    </div>
                </div>

                <div class="row calcular-button">
                    <button type="submit" class="btn btn-primary">Calcular</button>
                    <button id="btnResetFormActual" type="reset" class="btn btn-danger">Reiniciar</button>
                </div>
    }
                </div>
            </div>
            <!-- /Ingresos -->
        </div>
        
        <!-- Resultado -->
        <div id="panelResultadoActual" class="row tab-upper-margin" style="margin:20px 0px 0px 0px" hidden>
            <div class="panel panel-default">
                <div class="panel-heading">
                    <h3 class="panel-title">Resultado</h3>
                </div>
                <div class="panel-body">
                    <b>El contenido de carbono es de: </b> <label id="lblResultado" style="font-weight:normal">10 tulis</label>
                </div>
            </div>
            <div class="alert alert-info">
                Si desea ver cómo se realizó este cálculo, entrar <a href="#" class="alert-link"> aquí </a>
            </div>
        </div>
        <!-- /Resultado -->

    </div> 
    <!-- /Tab Cálculo actual-->

    <!-- Tab Cálculo proyectado-->
    <div id="calc_proyeccion" class="tab-pane fade">
        <!-- Ingresos -->
        <div class="row tab-upper-margin">
            <div class="panel panel-default" style="margin: 0px 15px 0px 15px;">
                <div class="panel-heading">
                    <h3 class="panel-title">Ingresos</h3>
                </div>
                <div class="panel-body">
                    @using (Html.BeginForm("calculoProyectado", "Calculator", FormMethod.Post, new { id = "formCalculoProyectado" }))
                {
                    <div class="row">
                        <div class="col-md-3">
                            <label for="sel_especieP">Especie</label>
                            <select class="form-control big-input-size" id="sel_especieP" name="especie">
                                <option>Pino Candelillo</option>
                                <option>Pino Caribe</option>
                                <option>Pinus Ocote</option>
                                <option>Teca</option>
                                <option>Palo Blanco</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label for="sel_sitio">Índice de sitio</label>
                            <select class="form-control big-input-size" id="sel_sitio" name="indice_sitio">
                                <option>Pésimo</option>
                                <option>Malo</option>
                                <option>Medio</option>
                                <option>Bueno</option>
                                <option>Excelente</option>
                            </select>
                        </div>

                        <div class="col-md-3">
                            <label for="txtYearsP">Años de proyección</label>
                            <input id="txtYearsP" name="ms" type="number" class="form-control big-input-size" placeholder="5 años" min="0" step="1" autocomplete="off" required>
                        </div>
                        <div class="col-md-3">
                            <label for="txtNum">Número de árboles</label>
                            <input id="txtNum" name="numArboles" type="number" class="form-control big-input-size" placeholder="1111" min="0" autocomplete="off" required>
                        </div>
                    </div>

                    <!-- Panel raleos -->
                    <div class="panel panel-info panel-raleo" hidden>
                        <div class="panel-body" style="padding-bottom: 10px;">
                            <div class="row input-upper-margin">
                                <div class="col-md-3">
                                    <label for="sel_raleo1">Año primer raleo</label>
                                    <select class="form-control big-input-size" id="sel_raleo1" name="sel_raleo1"></select>
                                </div>
                                <div class="col-md-3">
                                    <label for="pct1">% primer raleo</label>
                                    <input id="pct1" name="pct1" type="number" class="form-control big-input-size" placeholder="15" min="0" max="50" step="any" autocomplete="off">
                                </div>
                                <div class="col-md-3">
                                    <label for="sel_raleo2">Año segundo raleo</label>
                                    <select class="form-control big-input-size" id="sel_raleo2" name="sel_raleo2"></select>
                                </div>
                                <div class="col-md-3">
                                    <label for="pct2">% segundo raleo</label>
                                    <input id="pct2" name="pct2" type="number" class="form-control big-input-size" placeholder="10" min="0" max="50" step="any" autocomplete="off">
                                </div>
                            </div>
                            <p class="raleo-info">El porcentaje total no puede exceder del 100%</p>
                        </div>
                    </div>

                    <div class="row input-upper-margin" style="padding-left:15px; padding-right:15px;">
                        <label id="lblCheckRaleo" style="font-weight:100; color:#dddddd"><input type="checkbox" id="checkRaleo" value="value" disabled> Utilizar raleos en el cálculo </label>
                    </div>

                    <div class="row calcular-button">
                        <button type="submit" class="btn btn-primary">Calcular</button>
                        <button id="btnResetFormProyectada" type="reset" class="btn btn-danger">Reiniciar</button>
                    </div>
            }
                </div>
            </div>
        </div>
        <!-- /Ingresos -->
        
        <!-- Resultado -->
        <div id="panelResultadoProyectado" class="row tab-upper-margin" style="margin:20px 0px 0px 0px" hidden>
            <ul class="nav nav-pills nav-justified">
                <li class="active"><a data-toggle="tab" id="nav-carbono">Carbono</a></li>
                <li><a data-toggle="tab" id="nav-dap">DAP</a></li>
                <li><a data-toggle="tab" id="nav-area">Área</a></li>
                <li><a data-toggle="tab" id="nav-altura">Altura</a></li>
                <li><a data-toggle="tab" id="nav-volumen">Volumen</a></li>
            </ul>
            <div class="panel panel-default">
                <div class="panel-body" style="margin: 10px 15px 0px 15px">
                    <div class="row">

                        <div id="graph-result" style="width:100%; height:100%;"></div>
                    </div>
                    <div class="row">
                        <div id="data-result" class="row" style="margin: 5px; text-align:center;">
                            <div style="overflow-x: auto">
                                <table id="tablaProyectada" class="table table-bordered"></table>
                            </div>
                        </div>
                    </div>
                    <!-- /.tab-content -->
                </div>
            </div>
            <div class="row" style="margin: 15px 0px 0px 0px">
                <div class="alert alert-info">
                    Si desea ver cómo se realizó este cálculo, hacer click <a href="#" class="alert-link"> aquí </a>
                </div>
            </div>
        </div>
        <!-- /Resultado -->

    </div>
    <!-- /Tab Cálculo proyectado-->
</div>